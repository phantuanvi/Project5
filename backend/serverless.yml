org: phantuanvi
app: serverless-shop-app
service: serverless-shop-app
frameworkVersion: "3.32.0"

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-plugin-tracing

provider:
  name: aws
  runtime: nodejs14.x
  lambdaHashingVersion: "20201221"

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-1'}

  tracing:
    lambda: true
    apiGateway: true

  # Use these variables in the functions and resources section below. For example,
  # ${self:provider.environment.ATTACHMENT_S3_BUCKET}
  environment:
    ITEMS_TABLE: Items-${self:provider.stage}
    ITEMS_CREATED_AT_INDEX: CreatedAtIndex
    ATTACHMENT_S3_BUCKET: serverless-vi-item-images-${self:provider.stage}
    SIGNED_URL_EXPIRATION: 300

  logs:
    # Enable API Gateway logs
    restApi: true

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"

  # Provide iamRoleStatements property for performing Actions on DynamoDB
  GetItems:
    handler: src/lambda/http/getItems.handler
    events:
      - http:
          method: get
          path: items
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}"
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}/index/${self:provider.environment.ITEMS_CREATED_AT_INDEX}"
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"

  # Provide iamRoleStatements property. Decide the Actions and AWS Resource.
  # To refer to an AWS resource defined in the "Resources" section, you can use "Resource: !GetAtt <resource-name>.Arn"
  # To validate incoming HTTP requests, we have provided the request schemas in function definition below.
  CreateItem:
    handler: src/lambda/http/createItem.handler
    events:
      - http:
          method: post
          path: items
          cors: true
          authorizer: Auth
          request:
            schemas:
              application/json: ${file(models/create-item-model.json)}
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}"
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource: "*"

  # Provide property for setting up CORS, Authorizer, iamRoleStatements, and request schemas
  UpdateItem:
    handler: src/lambda/http/updateItem.handler
    events:
      - http:
          method: patch
          path: items/{itemId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}"
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  DeleteItem:
    handler: src/lambda/http/deleteItem.handler
    events:
      - http:
          method: delete
          path: items/{itemId}
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}"
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

  # Provide property for setting up CORS, Authorizer, iamRoleStatements
  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    events:
      - http:
          method: post
          path: items/{itemId}/attachment
          cors: true
          authorizer: Auth
    iamRoleStatements:
      - Effect: Allow
        Action:
          - s3:PutObject
          - s3:GetObject
        Resource:
          - "arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*"
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource:
          - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.ITEMS_TABLE}"
      - Effect: Allow
        Action:
          - xray:PutTraceSegments
        Resource:
          - "*"

resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    ItemsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: itemId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: itemId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.ITEMS_TABLE}
        LocalSecondaryIndexes:
          - IndexName: ${self:provider.environment.ITEMS_CREATED_AT_INDEX}
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: createdAt
                KeyType: RANGE
            Projection:
              ProjectionType: ALL

    # Do not forget to add the CorsConfiguration property
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.ATTACHMENT_S3_BUCKET}
        OwnershipControls:
          Rules:
            - ObjectOwnership: ObjectWriter
        PublicAccessBlockConfiguration:
          BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - "*"
              AllowedHeaders:
                - "*"
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    # For cross referencing the name of the bucket, use "!Ref AttachmentsBucket"
    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: "*"
              Action: "s3:GetObject"
              Resource: "arn:aws:s3:::${self:provider.environment.ATTACHMENT_S3_BUCKET}/*"
        Bucket: !Ref AttachmentsBucket
